<?xml version="1.0" encoding="utf-8"?>
<SyntaxEdit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <SearchOptions>EntireScope FindTextAtCursor FindSelectedText CycledSearch</SearchOptions>
  <BorderStyle>None</BorderStyle>
  <Pages>
    <DefaultPage>
      <Header>
        <Offset>
          <X>0</X>
          <Y>0</Y>
        </Offset>
      </Header>
      <Footer>
        <Offset>
          <X>0</X>
          <Y>0</Y>
        </Offset>
      </Footer>
      <PageSize>
        <Width>0</Width>
        <Height>0</Height>
      </PageSize>
    </DefaultPage>
  </Pages>
  <DisplayStrings />
  <Selection>
    <SelectionRect>
      <Location>
        <X>0</X>
        <Y>406</Y>
      </Location>
      <Size>
        <Width>24</Width>
        <Height>14</Height>
      </Size>
      <X>0</X>
      <Y>406</Y>
      <Width>24</Width>
      <Height>14</Height>
    </SelectionRect>
    <Options>UseColors OverwriteBlocks SelectLineOnTripleClick CopyLineWhenEmpty SelectWordOnCtrlClick</Options>
  </Selection>
  <Gutter>
    <LineNumbersForeColor>WindowText</LineNumbersForeColor>
    <Options>PaintLineNumbers PaintBookMarks PaintLineModificators</Options>
  </Gutter>
  <Margin>
    <Visible>false</Visible>
  </Margin>
  <LineStyles />
  <LineSeparator />
  <Printing>
    <Footer>
      <Offset>
        <X>0</X>
        <Y>0</Y>
      </Offset>
    </Footer>
    <Header>
      <Offset>
        <X>0</X>
        <Y>0</Y>
      </Offset>
    </Header>
  </Printing>
  <WhiteSpace />
  <TextSource>
    <Position>
      <X>0</X>
      <Y>406</Y>
    </Position>
    <Lexer>
      <Scheme>
        <Author>Quantum Whale, LLC.</Author>
        <Copyright>Copyright (c) 2004 - 2014 Quantum Whale LLC.</Copyright>
        <FileType>gas</FileType>
        <Version>1.5</Version>
        <Styles>
          <Style>
            <Name>idents</Name>
            <ForeColor>ControlText</ForeColor>
          </Style>
          <Style>
            <Name>numbers</Name>
            <ForeColor>ControlText</ForeColor>
          </Style>
          <Style>
            <Name>reswords</Name>
            <ForeColor>Blue</ForeColor>
          </Style>
          <Style>
            <Name>comments</Name>
            <ForeColor>Green</ForeColor>
            <PlainText>true</PlainText>
          </Style>
          <Style>
            <Name>xmlcomments</Name>
            <ForeColor>Gray</ForeColor>
          </Style>
          <Style>
            <Name>symbols</Name>
            <ForeColor>WindowText</ForeColor>
          </Style>
          <Style>
            <Name>whitespace</Name>
            <ForeColor>WindowText</ForeColor>
          </Style>
          <Style>
            <Name>strings</Name>
            <ForeColor>Maroon</ForeColor>
            <PlainText>true</PlainText>
          </Style>
          <Style>
            <Name>directives</Name>
            <ForeColor>Blue</ForeColor>
          </Style>
          <Style>
            <Name>htmlparams</Name>
            <ForeColor>Red</ForeColor>
          </Style>
          <Style>
            <Name>syntax errors</Name>
            <ForeColor>Red</ForeColor>
          </Style>
          <Style>
            <Name>codes nippets</Name>
            <ForeColor>Black</ForeColor>
            <BackColor>255:180:228:180</BackColor>
          </Style>
          <Style>
            <Name>GabReservedWords</Name>
            <ForeColor>Blue</ForeColor>
          </Style>
          <Style>
            <Name>GabTokenWithBrackets</Name>
            <ForeColor>Gray</ForeColor>
          </Style>
          <Style>
            <Name>GabFunctionIntrinsicDebug</Name>
            <ForeColor>White</ForeColor>
            <BackColor>Red</BackColor>
            <FontStyle>Bold</FontStyle>
            <PlainText>true</PlainText>
          </Style>
          <Style>
            <Name>GabVariable</Name>
            <ForeColor>Teal</ForeColor>
          </Style>
          <Style>
            <Name>GabVariableSystemDefined</Name>
            <ForeColor>Teal</ForeColor>
            <FontStyle>Bold Italic</FontStyle>
          </Style>
          <Style>
            <Name>GabGui</Name>
            <ForeColor>OrangeRed</ForeColor>
          </Style>
          <Style>
            <Name>GabProgramSubStartEnd</Name>
            <ForeColor>Black</ForeColor>
            <BackColor>LightGray</BackColor>
            <FontStyle>Bold</FontStyle>
            <PlainText>true</PlainText>
          </Style>
        </Styles>
      </Scheme>
    </Lexer>
    <TextStrings>
      <Lines>
        <string>Program.Sub.ScreenSU.Start</string>
        <string>Gui.F_FileSelect..Create</string>
        <string>Gui.F_FileSelect..Caption("File Selection")</string>
        <string>Gui.F_FileSelect..Size(5010,1695)</string>
        <string>Gui.F_FileSelect..MinX(0)</string>
        <string>Gui.F_FileSelect..MinY(0)</string>
        <string>Gui.F_FileSelect..Position(0,0)</string>
        <string>Gui.F_FileSelect..BackColor(-2147483633)</string>
        <string>Gui.F_FileSelect..MousePointer(0)</string>
        <string>Gui.F_FileSelect..Event(UnLoad,F_FileSelect_UnLoad)</string>
        <string>Gui.F_FileSelect.cmdUpload.Create(Button)</string>
        <string>Gui.F_FileSelect.cmdUpload.Size(1005,375)</string>
        <string>Gui.F_FileSelect.cmdUpload.Position(255,750)</string>
        <string>Gui.F_FileSelect.cmdUpload.Caption("Upload")</string>
        <string>Gui.F_FileSelect.cmdUpload.Event(Click,cmdUpload_Click)</string>
        <string>Gui.F_FileSelect.cmdBrowser.Create(Button)</string>
        <string>Gui.F_FileSelect.cmdBrowser.Size(375,375)</string>
        <string>Gui.F_FileSelect.cmdBrowser.Position(3750,375)</string>
        <string>Gui.F_FileSelect.cmdBrowser.Caption("^")</string>
        <string>Gui.F_FileSelect.cmdBrowser.Event(Click,cmdBrowser_Click)</string>
        <string>Gui.F_FileSelect.txtDirectory.Create(TextBox,"",True,3495,300,0,195,405,True,0,"Arial",8,-2147483643,1)</string>
        <string>Gui.F_FileSelect.lblFile.Create(Label,"File Directory",True,1935,255,0,255,195,True,0,"Arial",8,-2147483633,0)</string>
        <string>Program.Sub.ScreenSU.End</string>
        <string />
        <string>Program.Sub.Preflight.Start</string>
        <string>Variable.Global.uFile.Declare(String)</string>
        <string>Variable.Global.uFlag.Declare(String)</string>
        <string />
        <string>Program.Sub.Preflight.End</string>
        <string />
        <string>Program.Sub.Main.Start</string>
        <string />
        <string>F.ODBC.Connection!con.OpenConnection(V.Ambient.PDSN, V.Ambient.PUser, V.Ambient.PPass)</string>
        <string />
        <string>'Check to see if they have Excel or OOC</string>
        <string>F.Intrinsic.Control.CallSub(checkprogram)</string>
        <string />
        <string>Gui.F_FileSelect..Show</string>
        <string />
        <string>Program.Sub.Main.End</string>
        <string />
        <string>Program.Sub.cmdBrowser_Click.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("cmdBrowser_Click_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>Variable.Local.sDir.Declare(String)</string>
        <string>Variable.Local.sFile.Declare(String)</string>
        <string />
        <string>'Have a window pop up to browse for a spredsheet file</string>
        <string>F.Intrinsic.Control.SelectCase(V.Global.uFlag)</string>
        <string>F.Intrinsic.Control.Case("EXCEL")</string>
        <string>	F.Intrinsic.String.Build("{0}\Select File",V.Caller.GlobalDir,V.Local.sDir)</string>
        <string>	Function.Intrinsic.UI.ShowOpenFileDialog(Variable.Local.sDir,"xlsx|*xlsx","",V.Local.sFile)</string>
        <string>	Function.Intrinsic.Control.If(V.Local.sFile,&lt;&gt;,"***CANCEL***")</string>
        <string>		Gui.F_FileSelect.txtDirectory.Text(Variable.Local.sFile)</string>
        <string>	Function.Intrinsic.Control.EndIf</string>
        <string>F.Intrinsic.Control.Case("OOCALC")</string>
        <string>	F.Intrinsic.String.Build("{0}\Select File",V.Caller.GlobalDir,V.Local.sDir)</string>
        <string>	Function.Intrinsic.UI.ShowOpenFileDialog(Variable.Local.sDir,"ods|*ods","",V.Local.sFile)</string>
        <string>	Function.Intrinsic.Control.If(V.Local.sFile,&lt;&gt;,"***CANCEL***")</string>
        <string>		Gui.F_FileSelect.txtDirectory.Text(Variable.Local.sFile)</string>
        <string>	Function.Intrinsic.Control.EndIf</string>
        <string>F.Intrinsic.Control.EndSelect</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.Label("cmdBrowser_Click_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4209_BlanketUpload.g2c",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(f_fileselect_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string>Program.Sub.cmdBrowser_Click.End</string>
        <string />
        <string>Program.Sub.cmdUpload_Click.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("cmdUpload_Click_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>Variable.Local.sLog.Declare(String)</string>
        <string>Variable.Local.sName.Declare(String)</string>
        <string>Variable.Local.sDir.Declare(String)</string>
        <string>Variable.Local.bDir.Declare(Boolean)</string>
        <string>Variable.Local.sData.Declare(String)</string>
        <string>Variable.Local.iCount.Declare(String)</string>
        <string>Variable.Local.sLine.Declare(String)</string>
        <string>V.Local.sDataLine.Declare(String)</string>
        <string>Variable.Local.sDate.Declare(String)</string>
        <string>Variable.Local.sBlOrd.Declare(String)</string>
        <string>Variable.Local.sOrdLn.Declare(String)</string>
        <string>Variable.Local.sLnDate.Declare(String)</string>
        <string>Variable.Local.sLnQty.Declare(String)</string>
        <string>Variable.Local.sShipID.Declare(String)</string>
        <string>Variable.Local.sErr.Declare(String)</string>
        <string>Variable.Local.sTemp.Declare(String)</string>
        <string>Variable.Local.sParams.Declare(String)</string>
        <string>Variable.Local.bFlag.Declare(String)</string>
        <string>Variable.Local.sRet.Declare(String)</string>
        <string>Variable.Local.sBadLines.Declare(String)</string>
        <string>Variable.Local.sKeys.Declare(String)</string>
        <string>Variable.Local.sFilter.Declare(String)</string>
        <string>Variable.Local.iView.Declare(String)</string>
        <string>Variable.Local.sPO.Declare(String)</string>
        <string>V.Local.sPOs.Declare(String)</string>
        <string>V.Local.sSql.Declare(String)</string>
        <string />
        <string>Gui.F_FileSelect..Visible(False)</string>
        <string>F.Intrinsic.UI.InvokeWaitDialog("Reading File and processing releases.", "Blanket Order Releases Being Processed")</string>
        <string />
        <string />
        <string />
        <string>'Function below automatically formats to CCYYMMDD</string>
        <string>Function.Intrinsic.String.DateString(Variable.Ambient.Date, Variable.Local.sDate)</string>
        <string />
        <string>'Read the file</string>
        <string>'Function.Intrinsic.File.File2StringArray(Variable.Screen.F_FileSelect!txtDirectory.Text, Variable.Ambient.NewLine, Variable.Local.sData)</string>
        <string />
        <string />
        <string>F.Intrinsic.Control.SelectCase(V.Global.uFlag)</string>
        <string>F.Intrinsic.Control.Case("EXCEL")</string>
        <string>	F.Automation.MSExcel.ReadSpreadsheet(V.Screen.F_FileSelect!txtDirectory.Text, V.Local.sData)</string>
        <string>F.Intrinsic.Control.Case("OOCALC")</string>
        <string>	F.Automation.OOCalc.ReadSpreadsheet(V.Screen.F_FileSelect!txtDirectory.Text, V.Local.sData)</string>
        <string>F.Intrinsic.Control.EndSelect</string>
        <string />
        <string>F.Intrinsic.String.Split(V.Local.sData, "&amp;^&amp;", V.Local.sData)</string>
        <string>F.Intrinsic.String.Split(V.Local.sData(0), "$!$", V.Local.sDataLine)</string>
        <string />
        <string />
        <string>'Check to see if data was found</string>
        <string>Function.Intrinsic.Variable.IsArray(Variable.Local.sDataLine, Variable.Local.bFlag)</string>
        <string>Function.Intrinsic.Control.If(Variable.Local.bFlag, =, False)</string>
        <string>	'Print out error on Error Log</string>
        <string>	Function.Intrinsic.Control.CallSub(writefile, "sLine", "No data found in file")</string>
        <string>Function.Intrinsic.Control.Else</string>
        <string>	Function.Intrinsic.Math.Add(Variable.Local.sDataLine.UBound, 1, Variable.Local.iCount)</string>
        <string>	Function.Intrinsic.String.Build("{1}Data found successfully. {0} lines to be processed.{1}", Variable.Local.iCount, Variable.Ambient.NewLine, Variable.Local.sErr)</string>
        <string>	Function.Intrinsic.Control.CallSub(writefile, "sLine", Variable.Local.sErr)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Function.Intrinsic.Control.CallSub(createdatatable)</string>
        <string>Variable.Local.sBadLines.Set("")</string>
        <string />
        <string>'Format data per line and upload using Callwrapper</string>
        <string>Function.Intrinsic.Control.For(Variable.Local.iCount, Variable.Local.sDataLine.LBound, Variable.Local.sDataLine.UBound, 1)</string>
        <string>	Function.Intrinsic.Math.Add(Variable.Local.iCount, 1, Variable.Local.sErr)</string>
        <string>	Function.Intrinsic.String.Split(Variable.Local.sDataLine(Variable.Local.iCount), "*!*", Variable.Local.sLine)</string>
        <string>	'Check to see if correct number of params</string>
        <string>	Function.Intrinsic.Control.If(Variable.Local.sLine.UBound, =, 5)</string>
        <string>		Variable.Local.sBlOrd.Set(Variable.Local.sLine(0))</string>
        <string>		Variable.Local.sOrdLn.Set(Variable.Local.sLine(1))</string>
        <string>		Variable.Local.sLnQty.Set(Variable.Local.sLine(2))</string>
        <string>		Variable.Local.sLnDate.Set(Variable.Local.sLine(3))</string>
        <string>'		Variable.Local.sShipID.Set(Variable.Local.sLine(4))</string>
        <string>		F.Intrinsic.Control.IIF(V.Local.sLine(4), =, "", "F", V.Local.sLine(4), V.Local.sShipID)</string>
        <string>		Variable.Local.sPO.Set(V.Local.sLine(5))</string>
        <string>		'Need to add the Purchase order as well</string>
        <string>		</string>
        <string>		'Add line information to DataTable</string>
        <string>		F.Data.DataTable.AddRow("Lines", "BlanketOrder", V.Local.sBlOrd, "OrderLine", V.Local.sOrdLn, "Quantity", V.Local.sLnQty, "Date", V.Local.sLnDate, "ShipID", V.Local.sShipID, "PO", V.Local.sPO)</string>
        <string>		</string>
        <string>	Function.Intrinsic.Control.Else</string>
        <string>		'Keep track of lines that had invalid number of parameters.</string>
        <string>		Function.Intrinsic.String.Build("{0}{1},", Variable.Local.sBadLines, Variable.Local.sErr, Variable.Local.sBadLines) </string>
        <string>	Function.Intrinsic.Control.EndIf</string>
        <string>Function.Intrinsic.Control.Next(Variable.Local.iCount)</string>
        <string />
        <string>F.Data.DataTable.SetValueFormat("Lines", -1, "BlanketOrder", "BlanketOrder", "0000000")</string>
        <string>F.Data.DataTable.SetValueFormat("Lines", -1, "OrderLine", "OrderLine", "000")</string>
        <string>F.Data.DataTable.SetValueFormat("Lines", -1, "PO", "PO", "0000000") </string>
        <string>F.Data.DataTable.SetValueFormat("Lines", -1, "ShipID", "ShipID", "000000")</string>
        <string>F.Data.Dictionary.CreateFromDataTable("POs", "Lines", "BlanketOrder", "PO")</string>
        <string>F.Data.Dictionary.ReturnAllPairs("POs", V.Local.sKeys)</string>
        <string />
        <string>Function.Intrinsic.String.Split(Variable.Local.sKeys, "!*!", Variable.Local.sKeys)</string>
        <string>V.Local.sPOs.Set(V.Local.sKeys(1))</string>
        <string>Function.Intrinsic.String.Split(Variable.Local.sKeys(0), "*!*", Variable.Local.sKeys)</string>
        <string>Function.Intrinsic.String.Split(Variable.Local.sPOs, "*!*", Variable.Local.sPOs)</string>
        <string />
        <string>F.Intrinsic.Control.For(V.Local.iCount, 0, V.Local.sKeys.UBound, 1)</string>
        <string>	F.Intrinsic.String.LPad(V.Local.sKeys(V.Local.iCount), "0", 7, V.Local.sKeys(V.Local.iCount))</string>
        <string>	F.Intrinsic.String.Build("UPDATE ORDER_HEADER SET CUSTOMER_PO = '{0}' where ORDER_NO = '{1}' and  RECORD_TYPE = 'A' ", V.Local.sPOs(V.Local.iCount), V.Local.sKeys(V.Local.iCount), V.Local.sSql)</string>
        <string>	F.ODBC.Connection!con.Execute(V.Local.sSql)</string>
        <string>F.Intrinsic.Control.Next(V.Local.iCount)</string>
        <string />
        <string>F.Data.Dictionary.Close("POs")</string>
        <string />
        <string />
        <string>'Create dictionary based on Ship ID</string>
        <string>Function.Data.Dictionary.CreateFromDataTable("Filter", "Lines", "ShipID", "ShipID")</string>
        <string />
        <string>Function.Data.Dictionary.ReturnAllPairs("Filter", Variable.Local.sKeys)</string>
        <string />
        <string>Function.Intrinsic.String.Split(Variable.Local.sKeys, "!*!", Variable.Local.sKeys)</string>
        <string>Function.Intrinsic.String.Split(Variable.Local.sKeys(0), "*!*", Variable.Local.sKeys)</string>
        <string />
        <string>Function.Intrinsic.Control.For(Variable.Local.iCount, 0, Variable.Local.sKeys.UBound, 1)</string>
        <string>	Function.Intrinsic.String.Build("ShipID = '{0}'", Variable.Local.sKeys(Variable.Local.iCount), Variable.Local.sFilter)</string>
        <string>	Function.Data.DataView.Create("Lines", Variable.Local.sKeys(Variable.Local.iCount), 22, Variable.Local.sFilter, "BlanketOrder ASC, OrderLine ASC")</string>
        <string>	'loop through DataView to create csv file and use call wrapper accordingly.</string>
        <string>	Variable.Local.sShipID.Set(Variable.Local.sKeys(Variable.Local.iCount))</string>
        <string>	Variable.Local.sLine.Set("")</string>
        <string>	Function.Intrinsic.Control.For(Variable.Local.iView, 0, Variable.DataView.Lines![Variable.Local.sShipID].RowCount--, 1)</string>
        <string>		Variable.Local.sBlOrd.Set(Variable.DataView.Lines![Variable.Local.sShipID](Variable.Local.iView).BlanketOrder!FieldVal)</string>
        <string>		Variable.Local.sOrdLn.Set(Variable.DataView.Lines![Variable.Local.sShipID](Variable.Local.iView).OrderLine!FieldVal)</string>
        <string>		Variable.Local.sLnQty.Set(Variable.DataView.Lines![Variable.Local.sShipID](Variable.Local.iView).Quantity!FieldValFloat)</string>
        <string>		Variable.Local.sLnDate.Set(Variable.DataView.Lines![Variable.Local.sShipID](Variable.Local.iView).Date!FieldVal)</string>
        <string>		Function.Intrinsic.Control.If(Variable.Local.sLine, =, "")</string>
        <string>			Function.Intrinsic.String.Build("{0},{1},{2}", Variable.Local.sOrdLn, Variable.Local.sLnQty, Variable.Local.sLnDate, Variable.Local.sLine)</string>
        <string>		Function.Intrinsic.Control.Else</string>
        <string>			Function.Intrinsic.String.Build("{4}{3}{0},{1},{2}", Variable.Local.sOrdLn, Variable.Local.sLnQty, Variable.Local.sLnDate, Variable.Ambient.NewLine, Variable.Local.sLine, V.Local.sLine)</string>
        <string>		Function.Intrinsic.Control.EndIf	</string>
        <string>	Function.Intrinsic.Control.Next(Variable.Local.iView)	</string>
        <string>	Function.Intrinsic.String.Build("{0}\LineTemp.csv", V.Caller.FilesDir, Variable.Local.sTemp)	</string>
        <string>	Function.Intrinsic.File.String2File(Variable.Local.sTemp, Variable.Local.sLine)</string>
        <string>	F.Intrinsic.Control.If(V.Local.sShipID.Trim, =, "F")</string>
        <string>		V.Local.sShipID.Set("")</string>
        <string>	F.Intrinsic.Control.EndIf</string>
        <string>	Function.Intrinsic.String.ConcatCallWrapperArgs(Variable.Local.sBlOrd, "*!*ZDR*!*", "B", Variable.Local.sTemp, Variable.Local.sShipID, Variable.Local.sDate, Variable.Local.sParams)</string>
        <string>	Function.Global.General.CallWrapperSync(7041, Variable.Local.sParams)</string>
        <string>	'Check Callwrapperreturn to see if it was processed.</string>
        <string>	Function.Intrinsic.String.Split(Variable.Ambient.CallWrapperReturn, "*!*RETURN::", Variable.Local.sRet)</string>
        <string>	</string>
        <string>	Function.Intrinsic.Control.If(Variable.Local.sRet.UBound, =&gt;, 1)</string>
        <string>		Function.Intrinsic.String.Split(Variable.Local.sRet(1),"*!*", Variable.Local.sRet)</string>
        <string>		Function.Intrinsic.Control.If(Variable.Local.sRet(0).Trim, =, "0")</string>
        <string>			'The process was successful</string>
        <string>			Function.Intrinsic.String.Build("Process for Ship ID '{0}' was a success. Order lines released. {1}", Variable.Local.sShipID, Variable.Ambient.NewLine, Variable.Local.sErr)</string>
        <string>		Function.Intrinsic.Control.Else</string>
        <string>			'The process was not a success</string>
        <string>			Function.Intrinsic.String.Build("Process for Ship ID '{0}' Failed. Order lines not released. {1}", Variable.Local.sShipID, Variable.Ambient.NewLine, Variable.Local.sErr)</string>
        <string>		Function.Intrinsic.Control.EndIf		</string>
        <string>	Function.Intrinsic.Control.Else</string>
        <string>		'The process was not a success</string>
        <string>		Function.Intrinsic.String.Build("Process for Ship ID '{0}' Failed. Order lines not released. {1}", Variable.Local.sShipID, Variable.Ambient.NewLine, Variable.Local.sErr)		</string>
        <string>	Function.Intrinsic.Control.EndIf</string>
        <string>	Function.Intrinsic.Control.CallSub(writefile, "sLine", Variable.Local.sErr)</string>
        <string />
        <string />
        <string>Function.Intrinsic.Control.Next(Variable.Local.iCount)</string>
        <string />
        <string>F.Data.Dictionary.Close("Filter")</string>
        <string>F.Data.DataTable.Close("Lines")</string>
        <string />
        <string>V.Local.sShipID.Set(V.Screen.F_FileSelect!txtDirectory.Text)</string>
        <string>Function.Intrinsic.String.Build("{1}Blanket release orders in file {1}{0} {1}Completed. {1}", Variable.Local.sShipID, Variable.Ambient.NewLine, Variable.Local.sErr)		</string>
        <string>Function.Intrinsic.Control.CallSub(writefile, "sLine", Variable.Local.sErr)</string>
        <string />
        <string>Function.Intrinsic.UI.CloseWaitDialog</string>
        <string>Function.Intrinsic.UI.Msgbox("Blanket order releases have been processed. Error log has been created.", "Process Complete")</string>
        <string />
        <string>Gui.F_FileSelect.txtDirectory.Text("")</string>
        <string>Gui.F_FileSelect..Show</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.Label("cmdUpload_Click_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4209_BlanketUpload.g2c",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(f_fileselect_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string>Program.Sub.cmdUpload_Click.End</string>
        <string />
        <string>Program.Sub.F_FileSelect_UnLoad.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("F_FileSelect_UnLoad_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string>V.Local.sError.Declare(String)</string>
        <string />
        <string>F.ODBC.Connection!con.Close</string>
        <string>Function.Intrinsic.Control.End</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.Label("F_FileSelect_UnLoad_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4209_BlanketUpload.g2c",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string>Program.Sub.F_FileSelect_UnLoad.End</string>
        <string />
        <string>Program.Sub.WriteFile.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("WriteFile_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string />
        <string>'Add line to error log</string>
        <string>Function.Intrinsic.File.Append2FileNewLine(Variable.Global.uFile, Variable.Args.sLine)</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.Label("WriteFile_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4209_BlanketUpload.g2c",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(f_fileselect_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string>Program.Sub.WriteFile.End</string>
        <string />
        <string>Program.Sub.CreateDatatable.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("CreateDatatable_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>Variable.Local.sErr.Declare(String)</string>
        <string />
        <string>Function.Data.DataTable.Create("Lines", True)</string>
        <string />
        <string>Function.Data.DataTable.AddColumn("Lines", "BlanketOrder", "String")</string>
        <string>Function.Data.DataTable.AddColumn("Lines", "OrderLine", "String")</string>
        <string>Function.Data.DataTable.AddColumn("Lines", "Quantity", "String")</string>
        <string>Function.Data.DataTable.AddColumn("Lines", "Date", "String")</string>
        <string>Function.Data.DataTable.AddColumn("Lines", "ShipID", "String", "F")</string>
        <string>Function.Data.DataTable.AddColumn("Lines", "PO", "String")</string>
        <string />
        <string />
        <string>Function.Intrinsic.String.Build("{0}Data Table created. {0}", Variable.Ambient.NewLine, Variable.Local.sErr)</string>
        <string>Function.Intrinsic.Control.CallSub(writefile, "sLine", Variable.Local.sErr)</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.Label("CreateDatatable_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4209_BlanketUpload.g2c",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(f_fileselect_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string>Program.Sub.CreateDatatable.End</string>
        <string />
        <string>Program.Sub.checkProgram.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("checkProgram_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.bFlag.Declare(Boolean)</string>
        <string>V.Local.sErr.Declare(String)</string>
        <string />
        <string>V.Local.bFlag.Set(False)</string>
        <string />
        <string>F.Intrinsic.Control.CallSub(createfile)</string>
        <string />
        <string>'This subroutine will check for the presence of Excel or Open Office Spredsheet creator thing</string>
        <string>F.Automation.MSExcel.CheckPresence(V.Local.bFlag)</string>
        <string>F.Intrinsic.Control.If(v.Local.bFlag, =, True)</string>
        <string>	V.Global.uFlag.Set("EXCEL")</string>
        <string>	F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string>F.Automation.OOGeneral.CheckPresence(V.Local.bFlag)</string>
        <string>F.Intrinsic.Control.If(v.Local.bFlag, =, True)</string>
        <string>	V.Global.uFlag.Set("OOCALC")</string>
        <string>	F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.EndIf</string>
        <string />
        <string />
        <string>F.Intrinsic.String.Build("{0}Xml program not found in system. Ending program {0}", V.Ambient.NewLine, V.Local.sErr)</string>
        <string>F.Intrinsic.Control.CallSub(writefile, "sLine", V.Local.sErr)</string>
        <string>F.Intrinsic.Control.End</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.Label("checkProgram_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4209_BlanketUpload.g2c",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(f_fileselect_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string>Program.Sub.checkProgram.End</string>
        <string />
        <string>Program.Sub.CreateFile.Start</string>
        <string>F.Intrinsic.Control.SetErrorHandler("CreateFile_Err")</string>
        <string>F.Intrinsic.Control.ClearErrors</string>
        <string />
        <string>V.Local.sError.Declare(String)</string>
        <string>V.Local.sDate.Declare(String)</string>
        <string>V.Local.sName.Declare(String)</string>
        <string>V.Local.sLog.Declare(String)</string>
        <string>V.Local.sDir.Declare(String)</string>
        <string>V.Local.bDir.Declare(String)</string>
        <string />
        <string>'Function below automatically formats to CCYYMMDD</string>
        <string>Function.Intrinsic.String.DateString(Variable.Ambient.Date, Variable.Local.sDate)</string>
        <string />
        <string>'This is the name of the Error Log file. The format is SOUpload-MMDDCCYY-TTTTTT.txt</string>
        <string>Function.Intrinsic.String.Replace(Variable.Ambient.Date, "/", "", Variable.Local.sName)</string>
        <string>Function.Intrinsic.String.Split(Variable.Local.sName, " ", Variable.Local.sName)</string>
        <string>Function.Intrinsic.String.Split(Variable.Ambient.Time, " ", Variable.Local.sLog)</string>
        <string>Function.Intrinsic.String.Replace(Variable.Local.sLog(0), ":", "", Variable.Local.sLog)</string>
        <string>Function.Intrinsic.String.Build("SOUpload-{0}-{1}", Variable.Local.sName(0), Variable.Local.sLog, Variable.Local.sLog)</string>
        <string />
        <string>Function.Intrinsic.String.Build("{0}\Blanket Errorlogs", Variable.Caller.FilesDir, Variable.Local.sDir)</string>
        <string />
        <string>'Create the directory for the Error Logs if it is not there</string>
        <string>Function.Intrinsic.File.DirExists(Variable.Local.sDir, Variable.Local.bDir)</string>
        <string>Function.Intrinsic.Control.If(Variable.Local.bDir, =, False)</string>
        <string>	Function.Intrinsic.File.CreateDir(Variable.Local.sDir)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string />
        <string>Function.Intrinsic.String.Build("{0}\{1}.txt", Variable.Local.sDir, Variable.Local.sLog, Variable.Global.uFile)</string>
        <string>Function.Intrinsic.File.String2File(Variable.Global.uFile, "Begin Error Log")</string>
        <string />
        <string>F.Intrinsic.Control.ExitSub</string>
        <string>F.Intrinsic.Control.Label("CreateFile_Err")</string>
        <string>F.Intrinsic.Control.If(V.Ambient.ErrorNumber,&lt;&gt;,0)</string>
        <string>	Function.Intrinsic.String.Concat("Project: GCG_4209_BlanketUpload.g2c",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)</string>
        <string>	F.Intrinsic.UI.Msgbox(V.Local.sError)</string>
        <string>	F.Intrinsic.Control.CallSub(f_fileselect_unload)</string>
        <string>Function.Intrinsic.Control.EndIf</string>
        <string>Program.Sub.CreateFile.End</string>
        <string />
        <string>Program.Sub.Comments.Start</string>
        <string>${$0$}$GCG_4209_BlanketUpload.g2c$}$SISCO$}$10/18/2016 2:01:58 PM$}$False</string>
        <string>${$3$}$0$}$$}$0$}$-1$}$$}$12:00:00 AM$}$This project was generated by FEQ on 10/2016. This script should run from a custom menu item under Order Entry &gt; Transaction &gt; Blanket Order Release Upload.</string>
        <string>This script will allow the user to upload multiple blanket sales order releases through a .csv file</string>
        <string />
        <string>The format of the .csv file is expected to be:</string>
        <string />
        <string>Blanket Order No.</string>
        <string>Blanket Order line number - three digits</string>
        <string>Quantity - up to nine digits before the decimal and six after</string>
        <string>Line Due Date - in CCYYMMDD format</string>
        <string>Ship to ID</string>
        <string />
        <string />
        <string>Program.Sub.Comments.End</string>
      </Lines>
    </TextStrings>
  </TextSource>
  <Scrolling>
    <WindowOriginY>328</WindowOriginY>
    <Options>None</Options>
  </Scrolling>
  <Outlining>
    <AllowOutlining>true</AllowOutlining>
    <ImageSize>8</ImageSize>
    <Ranges>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>0</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>22</Y>
        </EndPoint>
        <Text>Program.Sub.ScreenSU</Text>
        <DisplayText>Program.Sub.ScreenSU</DisplayText>
        <Visible>false</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>24</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>28</Y>
        </EndPoint>
        <Text>Program.Sub.Preflight</Text>
        <DisplayText>Program.Sub.Preflight</DisplayText>
        <Visible>false</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>30</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>39</Y>
        </EndPoint>
        <Text>Program.Sub.Main</Text>
        <DisplayText>Program.Sub.Main</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>41</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>72</Y>
        </EndPoint>
        <Text>Program.Sub.cmdBrowser_Click</Text>
        <DisplayText>Program.Sub.cmdBrowser_Click</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>74</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>261</Y>
        </EndPoint>
        <Text>Program.Sub.cmdUpload_Click</Text>
        <DisplayText>Program.Sub.cmdUpload_Click</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>263</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>277</Y>
        </EndPoint>
        <Text>Program.Sub.F_FileSelect_UnLoad</Text>
        <DisplayText>Program.Sub.F_FileSelect_UnLoad</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>279</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>295</Y>
        </EndPoint>
        <Text>Program.Sub.WriteFile</Text>
        <DisplayText>Program.Sub.WriteFile</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>297</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>324</Y>
        </EndPoint>
        <Text>Program.Sub.CreateDatatable</Text>
        <DisplayText>Program.Sub.CreateDatatable</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>326</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>363</Y>
        </EndPoint>
        <Text>Program.Sub.checkProgram</Text>
        <DisplayText>Program.Sub.checkProgram</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>365</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>404</Y>
        </EndPoint>
        <Text>Program.Sub.CreateFile</Text>
        <DisplayText>Program.Sub.CreateFile</DisplayText>
        <Visible>true</Visible>
        <Level>0</Level>
      </Range>
      <Range>
        <StartPoint>
          <X>0</X>
          <Y>406</Y>
        </StartPoint>
        <EndPoint>
          <X>2147483647</X>
          <Y>420</Y>
        </EndPoint>
        <Text>Program.Sub.Comments</Text>
        <DisplayText>Program.Sub.Comments</DisplayText>
        <Visible>false</Visible>
        <Level>0</Level>
      </Range>
    </Ranges>
  </Outlining>
  <HyperText />
  <Spelling />
  <Braces />
</SyntaxEdit>